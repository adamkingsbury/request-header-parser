 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

//additional controllers
var headerParser = require('./header-parser/controller');

//let's set up the trust proxy settings and see if we get more sensible results
//from the user agent
//This was needed upon testing in glitch
console.log(`The are the trust proxy settings enabled?: ${app.enabled('trust proxy')}`);
app.enable('trust proxy');
console.log(`How about now?: ${app.enabled('trust proxy')}`);



//setup pug as the view template engine
app.set('view engine', 'pug');


//boilerplate from freecodecamp....I assume they need this for automated validation
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}


//app.use('/public', express.static(process.cwd() + '/public'));


//boilerplate from freecodecamp....I assume they need this for automated validation
app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });


//middleware to parse the user agent string from the requesting browser
//the result is attached to req.params.reqInfo
app.use(headerParser);


//Main site - prettified version of the user agent results
app.route('/')
    .get(function(req, res) {
		  res.render('index', req.ajkReqInfo);
    });


//API version
app.route('/json')
  .get(function(req,res){
  console.log(req.ajkReqInfo);
  res.status(200)
  res.send(req.ajkReqInfo);
  
  });




// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

